.. _testing:

.. include:: ../substitutions.rst

================================================================================
Automated testing
================================================================================

GDAL includes a comprehensive test suite, implemented using a combination of Python (via pytest) and C++ (via gtest).

After building GDAL using CMake, the complete test suite can be run using ``ctest -v --output-on-failure``. This will automatically set environment variables so that tests are run on the
the built version of GDAL, rather than an installed system copy.

Running a subset of tests using ``ctest``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The complete set of test suites known to ``ctest`` can be viewed running ``ctest -N``.

A subset of tests can be run using the ``-R`` argument to ``ctest``, which selects tests using a provided regular expression.
For example, ``ctest -R autotest`` would run the Python-based tests.

The ``-E`` argument can be used to exclude tests using a regular expression. For example, ``ctest -E gdrivers`` would exclude the suite of driver tests.

Running a subset of tests using ``pytest``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The test subsets exposed by ``ctest`` are still rather large and some may take several minutes to run.
If a higher level of specificity is needed, ``pytest`` can be called directly to run groups of tests or individual tests.
Before running ``pytest``, it is important to set environment variables so that the development build of GDAL is tested,
rather than a system version. This can be done by sourcing the following from the build directory:

.. code-block:: bash

    . ../scripts/setdevenv.sh

(with adjustments to the above path if the build directory is not a subdirectory of the GDAL source root).
To verify that environment variables were set correctly, you can check the version of a GDAL binary:

.. code-block:: bash

    gdalinfo --version
    # GDAL 3.7.0dev-5327c149f5-dirty, released 2018/99/99 (debug build)

and the Python bindings:

.. code-block:: bash

    python3 -c 'from osgeo import gdal; print(gdal.__version__)'
    # 3.7.0dev-5327c149f5-dirty

List tests containing "tiff" in the name:

.. code-block:: bash

    pytest --collect-only autotest -k tiff

Running an individual test file

.. code-block:: bash

    pytest autotest/gcore/vrt_read.py

A subset of tests within an individual test file can be run by providing a regular expression to the ``-k`` argument to ``pytest``.

.. code-block:: bash

    pytest autotest/gcore/vrt_read.py -k test_vrt_read_non_existing_source

.. warning:: Not all Python tests can be run independently; some tests depend on state set by a previous tests in the same file.


Checking for memory leaks and access errors using Valgrind
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The GDAL unit test suite can be run using the Valgrind tool to detect memory
errors such as leaks and incorrect reads/writes.

The test suite will run considerably slower under Valgrind (perhaps by a factor
of ten) so it is generally advisable to run a subset of the tests using the
methods described above.

.. warning:: Calling ``valgrind ctest`` will _not_ run the tests under
   ``valgrind``. Although it is possible to use Valgrind with ctest, it is
   simpler to call ``pytest`` or ``gdal_unit_test`` directly.

The following preparatory steps are necessary to avoid numerous false-positive
errors from Valgrind:

1. Many false-positive errors are generated by Python itself. Most of these can be
   removed by obtaining a suppression file that corresponds to the version of
   the Python interpreter used to run the tests. This file can be located in a
   source distribution of Python, or downloaded directly from GitHub (for
   example, at
   https://raw.githubusercontent.com/python/cpython/3.11/Misc/valgrind-python.supp)

2. A few false-positive errors are generated by the GDAL test suite or
   libraries that it uses (e.g., SWIG, numpy). These can be removed by
   ``autotest/valgrind-gdal.supp`` file in the GDAL repository.

3. When running Python unit tests, the default system memory allocator should
   be used instead of Python's internal memory allocator. This can be done by
   setting the ``PYTHONMALLOC`` environment variable to ``malloc``.

4. When running Python unit tests, Valgrind will report numerous "Invalid file
   descriptor" warnings that cannot currently be suppressed. These can be
   removed from the output using ``grep -v "invalid file
   descriptor\|alternative log fd"``.

Combining the following, we can run valgrind for a subset of Python tests as
follows:

.. code-block:: bash

    PYTHONMALLOC=malloc valgrind \
        --leak-check=full \
        --suppressions=/home/dan/dev/valgrind-python.supp \
        --suppressions=/home/dan/dev/gdal/autotest/valgrind-gdal.supp \
        pytest -v autotest/utilities 2>&1 | (grep -v "invalid file descriptor\|alternative log fd" || true) | tee valgrind-out

.. note:: To avoid verbose commands such as the one above, it may be useful to
   reference the suppression files and other common arguments in a
   ``~/.valgrindrc`` file.

